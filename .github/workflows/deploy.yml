name: Tests and deploy
# https://stackoverflow.com/questions/8466223/reuse-a-block-of-code-in-yaml
#        echo "$DOCKER_CONTAINER_NAME_FULL" > debug.txt && scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r -i $HOME/.ssh/key debug.txt $SERVER_SSH_USER@$SERVER_ADDRES:/home/$SERVER_SSH_USER/dockers/iso

on: [push]
#on:
#  pull_request:
#  push:
#    branches:
#      - master

env:
  SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
  SERVER_SSH_PRIV_KEY: ${{ secrets.SERVER_SSH_PRIV_KEY }}
  SERVER_ADDRES: ${{ secrets.SERVER_ADDRES }}
  SERVER_ADDRES_IP: ${{ secrets.SERVER_ADDRES_IP }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Fail on fork
      if: github.repository_owner != 'koshi8bit'
      run: |
        echo "Pipe works only on koshi8bit repo"
        exit 1
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow

    - name: Set up Python 3.10
      uses: actions/setup-python@v1
      with:
        python-version: 3.10.4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint flake8
      uses: py-actions/flake8@v2
      with:
        max-line-length: "120"
        path: "src"

    - name: Test with pytest
      run: |
        python -m unittest tests/test_app.py

    - name: Docker build & push
      #if: github.ref == 'refs/heads/master' && job.status == 'success'
      run: |
        GIT_BRANCH=$(git branch --show-current)
        GIT_HASH=$(git log -1 --pretty=format:%h)
        DOCKER_CONTAINER_NAME_FULL="${DOCKER_USER}/${DOCKER_CONTAINER_NAME}-${GIT_BRANCH}:${GIT_HASH}"

        docker login -u $DOCKER_USER -p $DOCKER_PASS
        docker build -t $DOCKER_CONTAINER_NAME_FULL .
        docker push $DOCKER_CONTAINER_NAME_FULL

#    DEPRECATED
#    - name: Configure SSH priv key
#      if: github.ref == 'refs/heads/master' && job.status == 'success'
#      run: |
#        set -eu
#        mkdir "$HOME/.ssh"
#        echo "$SERVER_SSH_PRIV_KEY" > "$HOME/.ssh/key"
#        chmod 600 "$HOME/.ssh/key"

    - name: Start on serv
#      #if: github.ref == 'refs/heads/master' && job.status == 'success'
      run: |
        GIT_BRANCH=$(git branch --show-current)
        GIT_HASH=$(git log -1 --pretty=format:%h)
        export DOCKER_CONTAINER_NAME_FULL="${DOCKER_USER}/${DOCKER_CONTAINER_NAME}-${GIT_BRANCH}:${GIT_HASH}"
        
        SSH_PRIVATE_KEY="$SERVER_SSH_PRIV_KEY"
        SSH_KNOWN_HOSTS="$SERVER_ADDRES"
        test -n "$SSH_PRIVATE_KEY" || ( echo "missing variable SSH_PRIVATE_KEY" && exit 1)
        test -n "$SSH_KNOWN_HOSTS" || ( echo "missing variable SSH_KNOWN_HOSTS" && exit 1)
        which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
        eval $(ssh-agent -s)
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        docker-compose -H "ssh://$SERVER_SSH_USER@$SERVER_ADDRES" pull
        docker-compose -H "ssh://$SERVER_SSH_USER@$SERVER_ADDRES" up -d

        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SERVER_SSH_USER@$SERVER_ADDRES \
        "ls -la "\
        "echo \"remote ssh works great\""

    - name: Finishing
      #if: github.ref == 'refs/heads/master' && job.status == 'success'
      run: |
        rm -f "$HOME/.ssh/key"
        rm -f debug.txt