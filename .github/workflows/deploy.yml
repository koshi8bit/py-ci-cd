name: Tests and deploy
# https://stackoverflow.com/questions/8466223/reuse-a-block-of-code-in-yaml
on: [push]
#on:
#  pull_request:
#  push:
#    branches:
#      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.10
      uses: actions/setup-python@v1
      with:
        python-version: 3.10.4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: flake8 Lint
      uses: py-actions/flake8@v2
      with:
        # ignore: "F401"
        # exclude: "src/ignoreme.py"
        max-line-length: "120"
        path: "src"
#      run: |
#        pip install flake8
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m unittest tests/test_app.py
    - name: Docker build
      env:
        DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
        DOCKER_CONTAINER_VERSION: ${{ secrets.DOCKER_CONTAINER_VERSION }}
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
      # if: github.ref == 'refs/heads/master' && job.status == 'success'
      run: |
        docker build -t $DOCKER_USER/$DOCKER_CONTAINER_NAME:$DOCKER_CONTAINER_VERSION .
#    - name: Docker push
#      env:
#        DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
#        DOCKER_CONTAINER_VERSION: ${{ secrets.DOCKER_CONTAINER_VERSION }}
#        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
#        DOCKER_USER: ${{ secrets.DOCKER_USER }}
#      # if: github.ref == 'refs/heads/master' && job.status == 'success'
#      run: |
#        docker login -u $DOCKER_USER -p $DOCKER_PASS
#        docker push $DOCKER_USER/$DOCKER_CONTAINER_NAME:$DOCKER_CONTAINER_VERSION
    - name: Configure SSH priv key
      env:
        SERVER_SSH_PRIV_KEY: ${{ secrets.SERVER_SSH_PRIV_KEY }}
      # if: github.ref == 'refs/heads/master' && job.status == 'success'
      run: |
        set -eu
        mkdir "$HOME/.ssh"
        echo "$SERVER_SSH_PRIV_KEY" > "$HOME/.ssh/key"
        chmod 600 "$HOME/.ssh/key"
#    - name: Create locally, send to serv
#      env:
#        SERVER_SSH_PRIV_KEY: ${{ secrets.SERVER_SSH_PRIV_KEY }}
#        SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
#        SERVER_ADDRES: ${{ secrets.SERVER_ADDRES }}
#        DOCKER_USER: ${{ secrets.DOCKER_USER }}
#        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
#        DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
#        DOCKER_CONTAINER_VERSION: ${{ secrets.DOCKER_CONTAINER_VERSION }}
#
#      # if: github.ref == 'refs/heads/master' && job.status == 'success'
#      run: |
#        ls -lh
#        docker save $DOCKER_USER/$DOCKER_CONTAINER_NAME:$DOCKER_CONTAINER_VERSION -o $DOCKER_CONTAINER_NAME.tar
#        ls -lh
#        gzip $DOCKER_CONTAINER_NAME.tar
#        ls -lh
##        python ./src/test11.py SERVER_SSH_USER SERVER_ADDRES DOCKER_USER DOCKER_CONTAINER_NAME
#        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r \
#             -i $HOME/.ssh/key $DOCKER_CONTAINER_NAME.tar.gz \
#             $SERVER_SSH_USER@$SERVER_ADDRES:/home/$SERVER_SSH_USER/dockers/iso
##        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $HOME/.ssh/key $SERVER_SSH_USER@$SERVER_ADDRES "cd dockers; ./restart.sh"
#    - name: Start on serv
#      env:
#        SERVER_SSH_PRIV_KEY: ${{ secrets.SERVER_SSH_PRIV_KEY }}
#        SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
#        SERVER_ADDRES: ${{ secrets.SERVER_ADDRES }}
#        DOCKER_USER: ${{ secrets.DOCKER_USER }}
#        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
#        DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
#        DOCKER_CONTAINER_VERSION: ${{ secrets.DOCKER_CONTAINER_VERSION }}
#
#      # if: github.ref == 'refs/heads/master' && job.status == 'success'
#      run: |
#        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \
#          $HOME/.ssh/key $SERVER_SSH_USER@$SERVER_ADDRES \
#          "docker load < ~/dockers/iso/back_automatic_build.tar.gz;"\
#          "docker stop back && docker rm back;"\
#          "docker run -p 5000:5000 -d --name back koshi8bit/back_automatic_build:latest"
